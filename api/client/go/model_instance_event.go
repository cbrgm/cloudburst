/*
 * Cloudburst
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceEvent struct for InstanceEvent
type InstanceEvent struct {
	Type string `json:"type"`
	Target string `json:"target"`
	Data Instance `json:"data"`
}

// NewInstanceEvent instantiates a new InstanceEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceEvent(type_ string, target string, data Instance, ) *InstanceEvent {
	this := InstanceEvent{}
	this.Type = type_
	this.Target = target
	this.Data = data
	return &this
}

// NewInstanceEventWithDefaults instantiates a new InstanceEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceEventWithDefaults() *InstanceEvent {
	this := InstanceEvent{}
	return &this
}

// GetType returns the Type field value
func (o *InstanceEvent) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstanceEvent) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstanceEvent) SetType(v string) {
	o.Type = v
}

// GetTarget returns the Target field value
func (o *InstanceEvent) GetTarget() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *InstanceEvent) GetTargetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *InstanceEvent) SetTarget(v string) {
	o.Target = v
}

// GetData returns the Data field value
func (o *InstanceEvent) GetData() Instance {
	if o == nil  {
		var ret Instance
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *InstanceEvent) GetDataOk() (*Instance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *InstanceEvent) SetData(v Instance) {
	o.Data = v
}

func (o InstanceEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["target"] = o.Target
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceEvent struct {
	value *InstanceEvent
	isSet bool
}

func (v NullableInstanceEvent) Get() *InstanceEvent {
	return v.value
}

func (v *NullableInstanceEvent) Set(val *InstanceEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceEvent(val *InstanceEvent) *NullableInstanceEvent {
	return &NullableInstanceEvent{value: val, isSet: true}
}

func (v NullableInstanceEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


