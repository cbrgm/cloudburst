/*
 * Cloudburst
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceSpec struct for InstanceSpec
type InstanceSpec struct {
	Container *ContainerSpec `json:"container,omitempty"`
}

// NewInstanceSpec instantiates a new InstanceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSpec() *InstanceSpec {
	this := InstanceSpec{}
	return &this
}

// NewInstanceSpecWithDefaults instantiates a new InstanceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSpecWithDefaults() *InstanceSpec {
	this := InstanceSpec{}
	return &this
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *InstanceSpec) GetContainer() ContainerSpec {
	if o == nil || o.Container == nil {
		var ret ContainerSpec
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSpec) GetContainerOk() (*ContainerSpec, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *InstanceSpec) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given ContainerSpec and assigns it to the Container field.
func (o *InstanceSpec) SetContainer(v ContainerSpec) {
	o.Container = &v
}

func (o InstanceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceSpec struct {
	value *InstanceSpec
	isSet bool
}

func (v NullableInstanceSpec) Get() *InstanceSpec {
	return v.value
}

func (v *NullableInstanceSpec) Set(val *InstanceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSpec(val *InstanceSpec) *NullableInstanceSpec {
	return &NullableInstanceSpec{value: val, isSet: true}
}

func (v NullableInstanceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


